version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: recruitment
      TZ: Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password

  # Redis 缓存 (可选)
  redis:
    image: redis:7-alpine
    container_name: lab-recruitment-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lab-network
    restart: unless-stopped

  # 后端服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: lab-recruitment-backend
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=lab_user
      - DB_PASSWORD=lab_password
      - DB_NAME=lab_recruitment
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your_jwt_secret_key_change_in_production
      - JWT_EXPIRE_HOURS=24
      - SERVER_MODE=release
      - LOG_LEVEL=info
      - UPLOAD_PATH=uploads
      - MAX_FILE_SIZE=10485760
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - mysql
      - redis
    networks:
      - lab-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lab-recruitment-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://localhost/api
      - VITE_APP_TITLE=实验室招新平台
    depends_on:
      - backend
    networks:
      - lab-network
    restart: unless-stopped

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: lab-recruitment-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads
    depends_on:
      - frontend
      - backend
    networks:
      - lab-network
    restart: unless-stopped

  # Prometheus 监控 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: lab-recruitment-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lab-network
    restart: unless-stopped

  # Grafana 监控面板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: lab-recruitment-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - lab-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  lab-network:
    driver: bridge 